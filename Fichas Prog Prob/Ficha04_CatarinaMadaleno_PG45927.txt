Problema 1 - Crie uma função sondagens(tamanho) que gere sondagens baseada nas probabilidades dadas abaixo:

var perc = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
  "pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}

~~~~
var perc = function(x){
  return x * 0.01
}

var sondagens = function(tamanho) {
  var prop = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
  "pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}
  var pares = _.toPairs(prop)
  var tuplo = _.unzip(pares)
  var partidos = tuplo[0]
  var percentagens = map(perc, tuplo[1])
  var mult = multinomial({ps: percentagens, n: tamanho})
  return _.fromPairs(_.zip(partidos, mult))
}

sondagens(100)
~~~~

Problema 2 e Problema 3 - Utilizando os resultados da sondagem, crie um modelo para as probabilidades de um eleitor votar em cada partido. Use o viz.marginals para mostrar o resultado graficamente.

~~~~
var perc = function(x){
  return x * 0.01
}

var sondagens = function(tamanho) {
  var prop = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
  "pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}
  var pares = _.toPairs(prop)
  var tuplo = _.unzip(pares)
  var partidos = tuplo[0]
  var percentagens = map(perc, tuplo[1])
  var mult = multinomial({ps: percentagens, n: tamanho})
  return _.fromPairs(_.zip(partidos, mult))
}


var modelo = function(){
  var tamanho = 10
  var samples = repeat(10, function(){uniform({a:0, b:1})}) //utilizei a distribuição uniforme para receber probabilidades
  var total = sum(samples)
  var probs = map(function(x){return x/total},samples) // para normalizar, dividi pela soma das samples
  var dist = Multinomial({ps:probs,n:tamanho})
  observe(dist,_.values(sondagens(tamanho)))
  return _.fromPairs(_.zip(_.keys(sondagens(tamanho)),probs))
}

viz.marginals(Infer(modelo))
~~~~

Problema 4 - Use o estimador do High Density Interval para estimar o intervalo da probabilidade para cada partido

~~~~
var perc = function(x){
  return x * 0.01
}

var sondagens = function(tamanho) {
  var prop = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
  "pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}
  var pares = _.toPairs(prop)
  var tuplo = _.unzip(pares)
  var partidos = tuplo[0]
  var percentagens = map(perc, tuplo[1])
  var mult = multinomial({ps: percentagens, n: tamanho})
  return _.fromPairs(_.zip(partidos, mult))
}


var modelo = function(){
  var tamanho = 10
  var samples = repeat(10, function(){uniform({a:0, b:1})}) //utilizei a distribuição uniforme para receber probabilidades
  var total = sum(samples)
  var probs = map(function(x){return x/total},samples) // para normalizar, dividi pela soma das samples
  var dist = Multinomial({ps:probs,n:tamanho})
  observe(dist,_.values(sondagens(tamanho)))   
  return _.fromPairs(_.zip(_.keys(sondagens(tamanho)),probs))
}


var estimar_intervalo = function(dist, margem, low, high) {
  expectation(marginalize(dist, margem), function(p) {low < p && p < high})
}

var HDI = function(dist, margem, low, high, delta) {
  var p = estimar_intervalo(dist, margem, low, high)
  if (p <= 0.95) return [low, high]
  var A  = estimar_intervalo(dist, margem, low + delta, high)
  var B  = estimar_intervalo(dist, margem, low, high - delta)
  return A > B ? HDI(dist, margem, low + delta, high, delta) : HDI(dist, margem, low, high - delta, delta)
}

var print_intervals = function(dist, margens) {
  map(function(m) {
    print(m + ": " + HDI(dist, m, 0, 1, 0.005))
  }, margens)
} 

var lista_partidos = ["ps", "psd", "cdu", "cds", "be", "pan", "chega", "il", "livre", "indecisos"]

var inferencia = Infer(modelo)

print_intervals(inferencia, lista_partidos)
~~~~