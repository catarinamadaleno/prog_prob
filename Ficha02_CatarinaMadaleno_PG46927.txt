Problema 1 - Escreva uma função que receba o número de dados e o número de faces de cada dado e imprima o histograma relativo a 10,000 lançamentos. Represente o histograma para os seguintes valores: 5d2; 2d5; 4d6; 2d100; 100d2;

~~~~
console.log('Exercício 1')

var dados_faces = function(dados, faces){
 var array = repeat(faces, function(){return 1/faces})
 //repeat retorna um array que repete o primeiro elemento usando a função do segundo elemento
 //multinomial usando o array de 1/faces repetido n vezes
 var res = multinomial({ps: array, n: dados})
 //lista com [numero de vezes que saiu 1, numero de vezes que saiu 2, ...]
 sum(mapIndexed(function(ind, val){
   (ind+1) * val
 },res))
 //mapIndexed(função a aplicar ao(índice do valor, valores da lista){
 //(indice+1 para começar no 1 e nao no 0)*valor da lista})
 //ou seja multiplica o numero de vezes que um valor saiu * esse numero e retorna a lista
 //depois tipo monopolio, soma os valores dos dados todos
}

viz(repeat(10000,function() {
  console.log('Histograma para 5d2: ')
  dados_faces(5, 2)
}))

//vou repetir 10 000x a soma do lançamento de 5 dados com 2 faces 
//como o repeat só aceita uma funçao sem argumentos, ponho a lista com [face*numero de vezes q saiu]

viz(repeat(10000,function() {
  console.log('Histograma para 2d5: ')
  dados_faces(2, 5)
}))

viz(repeat(10000,function() {
  console.log('Histograma para 4d6: ')
  dados_faces(4, 6)
}))

viz(repeat(10000,function() {
  console.log('Histograma para 2d100: ')
  dados_faces(2, 100)
}))

viz(repeat(10000,function() {
  console.log('Histograma para 100d2: ')
  dados_faces(100, 2)
}))
~~~~

Problema 2 - Crie uma nova função onde os dados repetidos são removidos;

~~~~
console.log('Exercício 2')

var dados_faces = function(dados, faces){
 var array = repeat(faces, function(){return 1/faces})
 //repeat retorna um array que repete o primeiro elemento usando a função do segundo elemento
 //multinomial usando o array de 1/faces repetido n vezes
 var res = multinomial({ps: array, n: dados})
 //lista com [numero de vezes que saiu 1, numero de vezes que saiu 2, ...]
 var a = sum(mapIndexed(function(ind, val){
   if (val<=1){
     var a =(ind+1) * val
     return a}
   //se o numero de vezes que saiu cada numero é 0 ou 1, retorna normal
   if (val>1){
     var a = (ind+1) * 1
     return a}
   //se o numero de vezes que saiu cada numero é + que 1, retorna como se so saisse 1x
 },res))
 //console.log(a)
 a
 //mapIndexed(função a aplicar ao(índice do valor, valores da lista){
 //(indice+1 para começar no 1 e nao no 0)*valor da lista})
 //ou seja multiplica o numero de vezes que um valor saiu * esse numero e retorna a lista
 //depois tipo monopolio, soma os valores dos dados todos
}


viz(repeat(10,function() {
  console.log('Histograma para 5d2 sem dados repetidos:')
  dados_faces(5, 2)
}))

//vou repetir 10 000x a soma do lançamento de 5 dados com 2 faces 
//como o repeat só aceita uma funçao sem argumentos, ponho a lista com [face*numero de vezes q saiu]

viz(repeat(10,function() {
  console.log('Histograma para 2d5 sem dados repetidos:')
  dados_faces(2, 5)
}))

viz(repeat(10,function() {
    console.log('Histograma para 4d6 sem dados repetidos:')
  dados_faces(4, 6)
}))
~~~~

Problema 3 - Crie uma função para o sistema Roll & Keep. Represente o histograma para 1k1; 3k1; 5k1; 7k2; 9k4

~~~~
var roll_keep = function(trait, skill){
  var dice = function() {
    var roll = randomInteger(10) + 1
    if(roll == 10)
      return 10 + dice()
    return roll
  }

  var sorted = sort(repeat(trait+skill, dice), gt).slice(0, trait)
  sum(sorted)
}

var roll1k1 = function(){
  roll_keep(1,0)
}

var roll3k1 = function(){
  roll_keep(2,1)
}

var roll5k1 = function(){
  roll_keep(4,1)
}

var roll7k2 = function(){
  roll_keep(5,2)
}

var roll9k4 = function(){
  roll_keep(5,4)
}

console.log('Exercício 3')


console.log('Histograma para Roll & Keep 1k1: ')
viz.hist(repeat(10000, roll1k1))

console.log('Histograma para Roll & Keep 3k1: ')
viz.hist(repeat(10000, roll3k1))

console.log('Histograma para Roll & Keep 5k1: ')
viz.hist(repeat(10000, roll5k1))

console.log('Histograma para Roll & Keep 7k2: ')
viz.hist(repeat(10000, roll7k2))

console.log('Histograma para Roll & Keep 9k4: ')
viz.hist(repeat(10000, roll1k1))
~~~~

Problema 4 - Crie uma função para o sistema WoD. Represente o histograma do nº de sucessos para vários nºs de dados e TN;

~~~~
var wod = function(atribute_discipline, tn){
  var dice = function() {
    var roll = randomInteger(10) + 1
    return roll
  }
  var sorted = sort(repeat(atribute_discipline, dice), gt)
  //console.log(sorted)
  var fracassos = reduce(function(x, acc){
    if (x==1){
      return acc+1
    } 
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(fracassos)
  var sucessos = reduce(function(x, acc){
    if (x >= tn){
      return acc+1
    }
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(sucessos)
  var total = sucessos - fracassos
  return total
}

var roll10_5 = function(){
  wod(10,5)
}

var roll6_3 = function(){
  wod(6, 3)
}

var roll4_4 = function(){
  wod(4, 4)
}

console.log('Exercício 4')

console.log('Histograma para WoD Attribute+Discipline=10 e TN=5: ')
viz.hist(repeat(10000, roll10_5))

console.log('Histograma para WoD Attribute+Discipline=6 e TN=3: ')
viz.hist(repeat(10000, roll6_3))

console.log('Histograma para WoD Attribute+Discipline=4 e TN=4: ')
viz.hist(repeat(10000, roll4_4))
~~~~

Problema 5 - Represente graficamente o nº de sucessos para os vários TN usando um heatmap quando se lançam 10 dados;

~~~~
var wod = function(atribute_discipline, tn){
  var dice = function() {
    var roll = randomInteger(10) + 1
    return roll
  }
  var sorted = sort(repeat(atribute_discipline, dice), gt)
  //console.log(sorted)
  var fracassos = reduce(function(x, acc){
    if (x==1){
      return acc+1
    } 
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(fracassos)
  var sucessos = reduce(function(x, acc){
    if (x >= tn){
      return acc+1
    }
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(sucessos)
  var total = sucessos - fracassos
  var list_sucessos = sorted.slice(0, sucessos)
   var total = sucessos - fracassos
  return {Sucessos: total, TN: tn}
}

var roll = function(){
  //var dice = randomInteger(20)+1
  var a = mapN(function(x){return x+2}, 9)
  //console.log(a.length)
  var dice = categorical({ps: repeat(9, function(){return 1/9}), vs: a})
  //console.log(dice)
  return(wod(10, dice))
}

console.log('Exercício 5')
console.log('Heatmap para WoD quando se lançam 10 dados: ')
viz.heatMap(repeat(10000, roll))
~~~~

Problema 6 - Represente um heatmap com o nº de dados vs o nº de sucessos para o TN de 9;

~~~~
var wod = function(atribute_discipline, tn){
  var dice = function() {
    var roll = randomInteger(10) + 1
    return roll
  }
  var sorted = sort(repeat(atribute_discipline, dice), gt)
  //console.log(sorted)
  var fracassos = reduce(function(x, acc){
    if (x==1){
      return acc+1
    } 
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(fracassos)
  var sucessos = reduce(function(x, acc){
    if (x >= tn){
      return acc+1
    }
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(sucessos)
  var total = sucessos - fracassos
  var list_sucessos = sorted.slice(0, sucessos)
   var total = sucessos - fracassos
  return {Sucessos: total, AtributeDiscipline: atribute_discipline}
}

var roll = function(){
  //var dice = randomInteger(20)+1
  var a = mapN(function(x){return x+1}, 20)
  //console.log(a.length)
  var dice = categorical({ps: repeat(20, function(){return 1/20}), vs: a})
  //console.log(dice)
  return(wod(dice, 9))
}

console.log('Exercício 6')
console.log('Heatmap para WoD quando o TN=9 : ')
viz.heatMap(repeat(10000, roll))
~~~~

Problema 7 - Represente graficamente contested rolls de Roll & Keep; veja o impacto dos Traits e Skills;

~~~~
var roll_keep = function(trait, skill){
  var dice = function() {
    var roll = randomInteger(10) + 1
    if(roll == 10)
      return 10 + dice()
    return roll
  }
  var sorted = sort(repeat(trait+skill, dice), gt).slice(0, trait)
  //console.log([trait, skill, sum(sorted)])
  sum(sorted)
}

var model = function(){
  var a = mapN(function(x){return x+1}, 10)
  var dice = function() {
    return categorical({ps: repeat(10, function(){return 1/10}), vs: a})}
  var trait1 = dice()
  var trait2 = dice()
  var skill1 = dice()
  var skill2 = dice()
  var d1 = roll_keep(trait1, skill1)
  var d2 = roll_keep(trait2, skill2)
  if (d1>d2){
    var trait_win = trait1
    var skill_win = skill1
    var pow_win = d1
    //console.log([[trait_win, skill_win]])
    return {Trait: trait_win, Skill: skill_win}
  }
  if (d2>d1){
    var trait_win = trait2
    var skill_win = skill2
    var pow_win = d2
    //console.log([[trait_win, skill_win]])
    return {Trait: trait_win, Skill: skill_win}
  }
  else {
    return model()
  }
}

console.log('Exercício 7')
console.log('Heatmap que representa as combinações Skill/Trait com mais probabilidade de\nganhar para o Roll&Keep:')
//esta função mostra no heatmap as combinações Skill+Trait que vencem em 10000 jogos
//Assim é possível de observar as combinações que têm mais probabilidade de ganhar um jogo em contested rolls
viz.heatMap(repeat(10000,model))
~~~~

Problema 8 - Represente graficamente contested rolls de WoD; veja o impacto no nº de dados.

~~~~
var wod = function(atribute_discipline, tn){
  var dice = function() {
    var roll = randomInteger(10) + 1
    return roll
  }
  var sorted = sort(repeat(atribute_discipline, dice), gt)
  //console.log(sorted)
  var fracassos = reduce(function(x, acc){
    if (x==1){
      return acc+1
    } 
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(fracassos)
  var sucessos = reduce(function(x, acc){
    if (x >= tn){
      return acc+1
    }
    else{
      return acc+0
    }
  }, 0, sorted)
  //console.log(sucessos)
  var total = sucessos - fracassos
  return total
}


var model = function(){
  var a = mapN(function(x){return x+1}, 10)
  var dice = function() {
    return categorical({ps: repeat(10, function(){return 1/10}), vs: a})}
  var at_dis1 = dice()
  var at_dis2 = dice()
  var tn1 = dice()
  var tn2 = dice()
  var d1 = wod(at_dis1, tn1)
  var d2 = wod(at_dis2, tn2)
  var margem = 0
  //Esta variável pode ser mudada de acordo com a margem pela qual tem de ganhar
  if (d1>(d2+margem) && d1>0 && d2>0){
    var at_dis_win = at_dis1
    var tn_win = tn1
    var success_win = d1
    //console.log([trait_win, skill_win, pow_win])
    return {AtributeDiscipline: at_dis_win, TN: tn_win}
  }
  if (d2>(d1+margem) && d1>0 && d2>0){
    var at_dis_win = at_dis2
    var tn_win = tn2
    var success_win = d2
    //console.log([trait_win, skill_win, pow_win])
    return {AtributeDiscipline: at_dis_win, TN: tn_win}
  }
  else {
    return model()
  }
}

console.log('Exercício 8')
console.log('Heatmap que representa as combinações Atribute+Discipline e TN com mais\nprobabilidade de ganhar para o WoD: ')
//esta função mostra no heatmap as combinações Attribute/Discipline+TN que vencem em 10000 jogos
//Assim é possível de observar as combinações que têm mais probabilidade de ganhar um jogo em contested rolls
viz.heatMap(repeat(10000,model))
~~~~